#Übung 2

**Zu 1. Einführung in CI/CD**
Grundlegende Konzepte:
**Continuous Integration:**
Continous Integration hilft bei Softwareentwicklung Integrationsprobleme zu minimieren, indem EntwicklerInnen mithilfe von Integrationsbuilds Fehler bereits frühzeitig erkannt werden. 
Automatisierte Builds testen hierfür diese täglichen Integrationsbuilds. 
**Continuous Deployment:**
Änderungen bzw. Updates von Software wird beim Continous Deployment automatisiert in die Produktionsumgebung überführt, wenn keine Fehler durch Tests festgestellt wurden. 
Dabei ist zu beachten, dass diese automatisch und nicht manuell in die Produktionsumgebung übernommen werden, um effizient diese Änderungen effizient und schnell bereitstellen zu können. 

Wir haben die **Plattform GitHub Actions** ausgewählt, da wir uns bereits schon für Übung 1 entschieden haben unser Repository auf GitHub zu verwalten. 
GitHub Actions wird von GitHub zur Verfügung gestellt und stellt somit ein Tool zur Verfügung, das alle notwendigen Funktionen für den Aufbau einer CI/CD-Pipeline bietet. 
Insbesondere im Hinblick auf unsere bevorstehende Aufgabe eignet sich GitHub Actions hervorragend, um den Automatisierungsprozess effizient umzusetzen.

**Zu 4. Deployment-Konzepte**
Unter einem Deployment Prozess versteht man die Überführung von Software von der Entwicklungsumgebung in die Produktionsumgebung. 
Dies kann zum Beispiel auf Servern oder Rechnern mit einer zugehörigen Domain und IP-Adresse erfolgen, häufig über Cloud-Dienste wie AWS (Amazon Web Services). 
Bevor die Software veröffentlicht wird, findet ein  sogenannter Staging-Prozess statt: Neue Funktionen werden erst nach Testläufen in einer Testumgebung für ausgewählten Personen zugänglich gemacht. 
Dort werden diese neuen Features wiederholt getestet, bevor sie in die Produktionsumgebung übernommen werden.  

